    public int maxProfit(int[] prices) {
        int n = prices.length;
        if (n == 0) return 0;
        
        int[] left = new int[n];
        int[] right = new int[n];
        
        //left[i]: maxProfit between 0 and i
        int min = prices[0];
        for (int i = 1; i < n; i++) {
            min = Math.min(min, prices[i]);
            //do not sell -> left[i-1], sell -> prices[i] - min
            left[i] = Math.max(left[i-1], prices[i] - min);
        }
        
        //right[i]: maxProfit between i and n 
        int max = prices[n-1];
        for (int i = n-2; i >= 0; i--) {
            max = Math.max(max, prices[i]);
            //do not buy -> right[i+1], buy -> max - prices[i]
            right[i] = Math.max(right[i+1], max - prices[i]);
        }
        
        int profit = 0;
        for (int i = 0; i < n; i++) {
            profit = Math.max(profit, left[i] + right[i]);
        }
        
        return profit;
    }
