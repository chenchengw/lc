  //space:O(n)
  public int rob(int[] nums) {
        if (nums.length == 0) return 0;
        int[] dp = new int[nums.length + 1];
        dp[0] = 0;
        dp[1] = nums[0];
        for (int i = 2; i <= nums.length; i++) {
            dp[i] = Math.max(dp[i-1], nums[i-1] + dp[i-2]);
        }
        return dp[nums.length];
    }
    
   //space: O(1)
   
       //dp[i]: the maximum amount of money rubbed until i
    //dp[i] = Math.max(dp[i-1], nums[i] + dp[i-2])
    public int rob(int[] nums) {
        if (nums.length == 0) return 0;
        int prev2 = 0;
        int prev1 = 0;
        int cur = 0;
        for (int i = 0; i < nums.length; i++) {
            cur = Math.max(prev1, nums[i] +prev2);
            prev2 = prev1;
            prev1 = cur; 
        }
        return cur;
    }
    
    //another interesting solution
        public int rob(int[] nums) {
        int a = 0, b = 0;
        for (int i = 0; i < nums.length; ++i) {
            if (i % 2 == 0) {
                a += nums[i];
                a = Math.max(a, b);
            } else {
                b += nums[i];
                b = Math.max(a, b);
            }
        }
        return Math.max(a, b);
    }
