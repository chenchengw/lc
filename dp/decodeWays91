   // constant space solution
    
   public int numDecodings(String s) {
        if (s.length() == 0) return 0;
        int prev = 1, secondPrev = 0;
        for (int i = 1; i <= s.length(); i++) {
            int cur = s.charAt(i-1) == '0' ? 0 : prev;
            if (i > 1) {
                int val = (s.charAt(i-2) - '0')*10 + s.charAt(i-1) - '0';
                if (val > 9 && val <= 26) {
                    // dp[i] += dp[i-2];
                    cur += secondPrev;
                }
            }
            secondPrev = prev;
            prev = cur;
        }
        return prev;
    }
    
    //dp[i] = dp[i-1] + dp[i-2] (if applicable)
    public int numDecodings(String s) {
        int n = s.length();
        if (n == 0) return 0;
        
        int[] dp = new int[n+1];
        dp[0] = 1;
        for (int i = 1; i <= n; i++) {
            //don't remember to handle this corner case
            dp[i] = (s.charAt(i-1) == '0') ? 0: dp[i-1];
            if (i > 1) {
                int val = (s.charAt(i-2) - '0')*10 + (s.charAt(i-1) - '0');
                if (val > 9 && val <= 26) dp[i] += dp[i-2];
            }
        }
        return dp[n];
    }
    
    //print all the decode ways
      public static void main(String[] args) {
    decodeWays("102");
  }
  
  static void decodeWays(String num) {
    if (num.length() == 0) return;
    helper(num, "", 0);
  }
  static void helper(String num, String way, int pos) {
    if (pos == num.length()) {
      System.out.println(way);
      return;
    }
    int singleDigit = Integer.parseInt(num.substring(pos, pos+1));
    if (singleDigit == 0) {
      return;
    }
    helper(num, way + (char)(singleDigit + 'A' - 1), pos+1);
    
    if (pos < num.length() - 1) {
      int doubleDigit = Integer.parseInt(num.substring(pos, pos+2));
      if (doubleDigit > 10 && doubleDigit <= 26) {
        helper(num, way + (char)(doubleDigit + 'A' -1), pos+2); 
      }
    }
    
  }
    
    
