  public int[] maxSumOfThreeSubarrays(int[] nums, int k) {
        int[] result = new int[]{-1, -1, -1};
        if (nums.length < 3*k) return result;
        int n = nums.length;
        int[] sum = new int[n+1];
        for (int i = 1; i <= n; i++) {
            sum[i] = sum[i-1] + nums[i-1];
        }
        
        
        int[] leftStart = new int[n];
        for (int i = k, curSum = sum[k] - sum[0]; i < n; i++) {
            if (sum[i+1] - sum[i+1-k] > curSum) {
                curSum = sum[i+1] - sum[i+1-k];
                leftStart[i] = i+1-k;
            } else {
                leftStart[i] = leftStart[i-1];
            }
        }
        
        //don't forget to initialize n-k position of rightStart
        int[] rightStart = new int[n];
        rightStart[n-k] = n-k;
        for(int j = n-k-1, curSum = sum[n] - sum[n-k]; j >= 0; j--) {
            if (sum[j+k] - sum[j] >= curSum) {
                rightStart[j] = j;
                curSum = sum[j+k] - sum[j];
            } else {
                rightStart[j] = rightStart[j+1];
            }
        }
        
        int maxSum = 0;
        // range of middle one
        for (int i = k; i <= n - 2*k; i++) {
            int l = leftStart[i-1], r = rightStart[i+k];
            int curSum = (sum[i+k] - sum[i]) + (sum[l+k] - sum[l]) + (sum[r+k] - sum[r]);
            if (curSum > maxSum) {
                maxSum = curSum;
                result[0] = l;
                result[1] = i;
                result[2] = r;
            }
        }
        return result;
     }
