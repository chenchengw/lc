    public int[] maxSumOfThreeSubarrays(int[] nums, int k) {
        int[] result = new int[]{-1, -1, -1};
        if (nums.length == 0) return result;
        int n = nums.length;
        int[] sum = new int[n+1];
        for (int i = 1; i <= n; i++) {
            sum[i] = sum[i-1] + nums[i-1];
        }
        
        int[] leftStart = new int[n];
        for (int i = k, curSum = sum[k] - sum[0]; i < n - 2*k; i++) {
            if (sum[i+1] - sum[i+1-k] > curSum) {
                curSum = sum[i+1] - sum[i+1-k];
                leftStart[i] = i+1-k;
            } else {
                leftStart[i] = leftStart[i-1];
            }
        }
        
        int[] rightStart = new int[n];
        rightStart[n-k] = n - k;
        for (int i = n - k - 1, curSum = sum[n] - sum[n-k]; i >= k; i--) {
            if (sum[i+k] - sum[i] >= curSum) {
                curSum = sum[i+k] - sum[i];
                rightStart[i] = i;
            } else {
                rightStart[i] = rightStart[i+1];
            }
        }
        
        int maxSum = 0;
        for (int i = k; i <= n - 2*k; i++) {
            int l = leftStart[i-1], r = rightStart[i+k];
            int curSum = sum[i+k] - sum[i] + (sum[l+k] - sum[l]) + (sum[r+k] - sum[r]);
            if (curSum > maxSum) {
                result[0]= l;
                result[1] = i;
                result[2] = r;
                maxSum = curSum;
            }
        }
        return result;
    }
