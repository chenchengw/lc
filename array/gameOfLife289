    
    //10: dead last generation -> go live
    //01: live last generation -> go die
    //11: live last generation -> live
    //00: dead last generatioin -> dead
    public void gameOfLife(int[][] board) {
        int m = board.length;
        if (m == 0) return;
        int n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int live = neighborsLive(board, i, j);
                //nodes with value set to 2 and 3 are already visited nodes
                if (board[i][j] == 0 && live == 3) {
                    board[i][j] = 2;
                }
                if (board[i][j] == 1 && live >= 2 && live <= 3) {
                    board[i][j] = 3;
                }
            }
        }
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] >>= 1; //get the second state
            }
        }
    }
    
    int neighborsLive(int[][] board, int i, int j) {
        int[] dx = {-1, 1, 0, -1, 1, -1, 0, 1};
        int[] dy = {-1, -1, -1, 0, 0, 1, 1, 1};
        int cnt = 0;
        for (int k = 0; k < 8; k++) {
            int x = i + dx[k], y = j + dy[k];
            if (x >= 0 && x < board.length && y >= 0 && y < board[0].length) {
                cnt += board[x][y] & 1;
            }
        }
        return cnt;
    }
