    public int minDepth(TreeNode root) {
       if (root == null ) return 0;
       Queue<TreeNode> q = new LinkedList<>();
       q.offer(root);

        int depth = 1;
        while (!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                TreeNode tn = q.poll();
                if (tn.left == null && tn.right == null) return depth;
                if (tn.left != null) {
                    q.offer(tn.left);
                }
                if (tn.right != null) {
                    q.offer(tn.right);
                }
            }
            depth++;
        }
        return depth;
    }
    
    //DFS
        public int minDepth(TreeNode root) {
              if(root == null) return 0;
        int left = minDepth(root.left);
        int right = minDepth(root.right);
        return (left == 0 || right == 0) ? left + right + 1: Math.min(left,right) + 1;
    }
