    public List<String> removeInvalidParentheses(String s) {
        if (s == null || s.length() == 0) return new ArrayList<>();
        //to avoid duplication in the result returned
        Set<String> set = new HashSet<>();
        Queue<String> q = new LinkedList<>();
        q.offer(s);
        Boolean found = false;
        while(!q.isEmpty()) {
            String str = q.poll();
            if (isValid(str)) {
                set.add(str);
                found = true;
            }
            if (found == true) continue;
            for (int i = 0; i < str.length(); i++) {
                if (s.charAt(i) != '(' && s.charAt(i) != ')') {
                    continue;
                }
                String next = str.substring(0, i) + str.substring(i+1);
                q.offer(next);
            }
        }
        return new ArrayList(set);
    }
    
    boolean isValid(String s) {
        int count = 0;
        for (char c: s.toCharArray()) {
            if (c == '(') {
                count++;
            } else if (c == ')') {
                if (count == 0) return false;
                count--;
            }
        }
        return count == 0;
    }
