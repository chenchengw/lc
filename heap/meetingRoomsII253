  //time: O(NlgN), space: O(N)
    public int minMeetingRooms(Interval[] intervals) {
        if (intervals.length == 0) return 0;
        //don't forget to sort by start first
        Arrays.sort(intervals, new Comparator<Interval>() {
            public int compare(Interval i1, Interval i2){
                return i1.start - i2.start;
            }
        });
        
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();
        pq.offer(intervals[0].end);
        for (int i = 1; i < intervals.length; i++) {
            if (intervals[i].start >= pq.peek()) {
                pq.poll();
            }
            pq.offer(intervals[i].end);
        }
        return pq.size();
    }
