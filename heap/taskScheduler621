    //time: O(n), space: O(n)
    public int leastInterval(char[] tasks, int n) {
        int[] freq = new int[26];
        for (char c: tasks) {
            freq[c - 'A']++;
        }
        //max heap
        Queue<Integer> pq = new PriorityQueue<Integer>((a, b) -> (b-a));
        for (int f: freq) {
            if (f > 0) pq.offer(f);
        }
        int res = 0;
        while (!pq.isEmpty()) {
            int cnt = 0;
            List<Integer> t = new ArrayList<Integer>();
            for (int i = 0; i < n+1; i++) {
                if (!pq.isEmpty()) {
                    t.add(pq.peek());
                    pq.poll();
                    cnt++;
                }
            }
            //decrement the frequency of highest and push to the pq 
            for (int d: t) {
                if (--d > 0) pq.offer(d);
            }
            //if the queue is empty, return the trailing sequences's number cnt
            res += pq.isEmpty() ? cnt : n + 1;
        }
        return res;
    }
