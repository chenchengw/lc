class Solution {
  
  public static void main(String[] args) {
      int[][] nums = new int[][]{{4,10,15,24,26}, {0,9,12,20}, {5,18,22,30}};
      int[] ret = smallestRange(nums);
      System.out.println("start=" + ret[0] + ",end=" + ret[1]);
    
  }

  public static int[] smallestRange(int[][] nums) {
      if (nums == null || nums.length == 0) {
        throw new IllegalArgumentException("input is null or empty");
      }
      int maxVal = Integer.MIN_VALUE;
      PriorityQueue<Element> pq = new PriorityQueue<>((a,b) -> (a.val - b.val));
      for(int i =0; i < nums.length; i++) {
        if (nums[i].length != 0) {
          pq.offer(new Element(i, 0, nums[i][0]));
          maxVal = Math.max(maxVal, nums[i][0]);
        }
      }
      int range = Integer.MAX_VALUE, start = -1, end = -1;
      while (pq.size() == nums.length) {
        Element elem = pq.poll();
        if (maxVal - nums[elem.row][elem.idx] < range) {
          range = maxVal - nums[elem.row][elem.idx];
          start = nums[elem.row][elem.idx];
          end = maxVal;
        }
        if (elem.idx + 1 < nums[elem.row].length) {
          elem.idx++;
          elem.val = nums[elem.row][elem.idx];
          pq.offer(elem);
          maxVal = Math.max(maxVal, nums[elem.row][elem.idx]);
        }
      }
      return new int[]{start, end};
  }
  
  static class Element {
    int row;
    int idx;
    int val;
    Element(int row, int idx, int val) {
      this.row = row;
      this.idx = idx;
      this.val = val;
    }
  }
