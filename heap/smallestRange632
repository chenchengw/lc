 public int[] smallestRange(List<List<Integer>> nums) {
        PriorityQueue<Element> pq = new PriorityQueue<>(new Comparator<Element>(){
            public int compare(Element e1, Element e2) {
                return e1.val - e2.val;
            }
        });
        int maxVal = 0;
        for (int i = 0; i < nums.size(); i++) {
            pq.offer(new Element(i, 0, nums.get(i).get(0)));
            maxVal = Math.max(maxVal, nums.get(i).get(0));
        }
        int range = Integer.MAX_VALUE;
        int start = -1, end = -1;
        while (pq.size() == nums.size()) {
            Element element = pq.poll();
            if (maxVal - element.val < range) {
                range = maxVal - element.val;
                start = element.val;
                end = maxVal;
            }
            if (element.idx + 1 < nums.get(element.row).size()) {
                element.val = nums.get(element.row).get(element.idx+1);
                element.idx += 1;
                pq.offer(element);
                if (element.val > maxVal) {
                    maxVal = element.val;
                }
            }
        }
        
        return new int[]{start, end};
    }
    
    class Element {
        int val;
        int idx;
        int row;
        
        public Element(int row, int idx, int val) {
            this.val = val;
            this.idx = idx;
            this.row = row;
        }
    }
