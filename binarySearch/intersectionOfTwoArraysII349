    //this problem can also be solved by hash set, two pointers
    public int[] intersection(int[] nums1, int[] nums2) {
       Set<Integer> hs = new HashSet<>(); 
       //pick the integer with smaller size and sort it for binary search
       if (nums1.length > nums2.length) {
           int[] tmp = nums1;
           nums1 = nums2;
           nums2 = tmp;
       }
       Arrays.sort(nums1);
       for (int num: nums2) {
           if (binarySearch(nums1, num)) {
               hs.add(num);
           }
       }
       int i = 0;
       int[] result = new int[hs.size()];
       for (int n: hs) {
           result[i++] = n;
       }
       return result;
    }
    
    boolean binarySearch(int[] nums, int target) {
        int lo = 0, hi = nums.length - 1;
        while (lo <= hi) {
            int mid = lo + (hi - lo)/2;
            if (nums[mid] == target) return true;
            if (nums[mid] < target) {
                lo = mid + 1;
            } else {
                hi = mid - 1;
            }
        }
        return false;
    }
