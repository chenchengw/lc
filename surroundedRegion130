   //BFS, time: O(MN), space: O(MN)
   
   public void solve(char[][] board) {
        if (board == null || board.length == 0 || board[0].length == 0) {
            return;
        }
        //start from 'O' that are on the edges
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if ((i == 0 || j == 0 || i == board.length - 1 || j == board[0].length - 1) && board[i][j] == 'O') {
                   Queue<Integer> q = new LinkedList<Integer>();
                    q.offer(i*board[0].length + j);
                    board[i][j] = '$';
                    while (!q.isEmpty()) {
                        Integer key = q.poll();
                        int x = key/board[0].length;
                        int y = key%board[0].length;
                        //the neighbor of (x, y) that are 'O' are marked
                        if (x > 0 && board[x-1][y] == 'O') {
                            q.offer((x-1)*board[0].length + y);
                            board[x-1][y] = '$';
                        }
                        if (x < board.length - 1 && board[x+1][y] == 'O') {
                            q.offer((x+1)*board[0].length + y);
                            board[x+1][y] = '$';
                        }
                        if (y > 0 && board[x][y-1] == 'O') {
                            q.offer(x*board[0].length + y-1);
                            board[x][y-1] = '$';
                        }
                        if (y < board[0].length - 1 && board[x][y+1] == 'O') {
                            q.offer(x*board[0].length + y+1);
                            board[x][y+1] = '$';
                        }
                    }
                }
            }
        }
        //recover the board
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == 'O') board[i][j] = 'X';
                if (board[i][j] == '$') board[i][j] = 'O';
            }
        }
    }
    
    
    //union find: time: O(MN), space: O(MN)
        public void solve(char[][] board) {
        int n = board.length;
        if(n==0)    return;
        int m = board[0].length;
        UnionFind uf = new UnionFind(n*m+1);
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if ((i == 0 || j == 0 || i == board.length - 1 || j == board[0].length - 1) && board[i][j] == 'O') {
                    uf.union(i*m + j, n*m);
                } else if (board[i][j] == 'O') {
                   if(board[i-1][j]=='O')
                        uf.union(i*m+j,(i-1)*m+j);
                    if(board[i+1][j]=='O')
                        uf.union(i*m+j,(i+1)*m+j);
                    if(board[i][j-1]=='O')
                        uf.union(i*m+j,i*m+j-1);
                    if(board[i][j+1]=='O')
                        uf.union(i*m+j,i*m+j+1); 
                }
            }
        }
        //recover the board
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                 if(!uf.connected(i*m+j,n*m)){ // if a 'O' node is not connected to the dummy node, it is captured
                    board[i][j]='X';
                }
            }
        }
    }
    
    class UnionFind {
        private int[] id;
        private int[] size;

        public UnionFind(int n) {
            id = new int[n];
            size = new int[n];
            for (int i = 0; i < n; i++) {
                id[i] = i;
                size[i] = 1;
            }
        }

        public int find(int i) {
            while (i != id[i]) {
                id[i] = id[id[i]];
                i = id[i];
            }
            return i;
        }

        public void union(int x, int y) {
            int i = find(x);
            int j = find(y);
            if (i == j) {
                return;
            }
            if (size[i] < size[j]) {
                id[i] = j;
                size[j] += size[i];
            } else {
                id[j] = i;
                size[i] += size[j];
            }
        }

        public boolean connected(int x, int y) {
            return find(x) == find(y);
        }
    }
