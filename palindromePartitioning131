    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<>();
        helper(s, result, new ArrayList<String>(), 0);
        return result;
    }
    
    void helper(String s, List<List<String>> result, List<String> tmp, int start) {
        if (start == s.length()) {
            result.add(new ArrayList<String>(tmp));
            return;
        }
        for (int i = start; i < s.length(); i++) {
            if (isPalidrome(s, start, i)) {
                tmp.add(s.substring(start, i+1));
                helper(s, result, tmp, i+1);
                tmp.remove(tmp.size()-1);
            }
        }
    }
    
    boolean isPalidrome(String s, int start, int end) {
        while(start <= end) {
            if (s.charAt(start) != s.charAt(end)) return false;
            start++;
            end--;
        }
        return true;
    }
