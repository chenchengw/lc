class NumMatrix {

    int[][] bit;
    int[][] matrix;
    
    public NumMatrix(int[][] matrix) {
        int m = matrix.length;
        if (m == 0) return;
        int n = matrix[0].length;
        this.bit = new int[m+1][n+1];
        this.matrix = new int[m+1][n+1];
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                update(i, j, matrix[i][j]);
            }
        }
    }
    
    public void update(int row, int col, int val) {
       int diff = val - matrix[row + 1][col + 1];
       for (int i = row + 1; i < matrix.length; i += i & (-i)) {
           for (int j = col + 1; j < matrix[i].length; j += j & (-j)) {
               bit[i][j] += diff;
           }
       }
       matrix[row+1][col+1] = val;     
    }
    
    public int sumRegion(int row1, int col1, int row2, int col2) {
        return getSum(row2+1, col2+1) - getSum(row1, col2+1) - getSum(row2+1, col1) + getSum(row1, col1);
    }
    
    private int getSum(int row, int col) {
        int sum = 0;
        for (int i = row; i > 0; i -= i &(-i)) {
            for (int j = col; j > 0; j -= j & (-j)) {
                sum += bit[i][j];
            }
        }
        return sum;
    }
}
