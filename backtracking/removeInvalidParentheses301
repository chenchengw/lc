    public List<String> removeInvalidParentheses(String s) {
       int rmL = 0, rmR = 0;
        //rml: total num of left parentheses that need to remove
        //rmR: total num of right parentheses that need to remove
        for (char c: s.toCharArray()) {
            if (c == '(') {
                rmL++;
            } else if (c == ')') {
                if (rmL > 0) {
                    rmL--;
                } else {
                    rmR++;
                }
            }
        }
        Set<String> res = new HashSet<>();
        dfs(res, s, new StringBuilder(), rmL, rmR, 0, 0);
        return new ArrayList<String>(res);
    }
    
    private void dfs(Set<String> res, String s, StringBuilder sb, int rmL, int rmR, int i, int open) {
        if (rmL < 0 || rmR < 0 || open < 0) return;
        if (i == s.length()) {
            if (rmL == 0 && rmR == 0 && open == 0) {
                res.add(sb.toString());
            }
            return;
        }
        
        char c = s.charAt(i);
        int len = sb.length();
        
        if (c == '(') {
            //do not keep (
            dfs(res, s, sb, rmL-1, rmR, i+1, open);
            //keep (
            dfs(res, s, sb.append(c), rmL, rmR, i+1, open+1);
        } else if (c == ')') {
            //do not keep )
            dfs(res, s, sb, rmL, rmR-1, i+1, open);
            //keep )
            dfs(res, s, sb.append(c), rmL, rmR, i+1, open-1);
        } else {
            dfs(res, s, sb.append(c), rmL, rmR, i+1, open);
        }
        
        //reset sb
        sb.setLength(len);
    }
