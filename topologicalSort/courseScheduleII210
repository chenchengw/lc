    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] res = new int[numCourses];
        ArrayList<Integer>[] graph = new ArrayList[numCourses];
        int[] indegree = new int[numCourses];
        //initilize indegree and graph
        for (int[] prereq: prerequisites) {
            if (graph[prereq[1]] == null) {
                graph[prereq[1]] = new ArrayList<Integer>();
            }
            graph[prereq[1]].add(prereq[0]);
            indegree[prereq[0]]++;
        }
        //topological sort
        int idx = 0;
        Queue<Integer> q = new LinkedList<Integer>();
        for(int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) q.offer(i);
        }
        while(!q.isEmpty()) {
            int course = q.poll();
            res[idx++] = course;
            if (graph[course] == null) continue;
            for (int next: graph[course]) {
                indegree[next]--;
                if (indegree[next] == 0) q.offer(next);
            }
        }
        return idx == numCourses ? res : new int[0];
    }
