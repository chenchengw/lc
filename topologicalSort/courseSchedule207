 public boolean canFinish(int numCourses, int[][] prerequisites) {
        if (numCourses == 0) return false;
        ArrayList[] graph = new ArrayList[numCourses];
        int[] degree = new int[numCourses];
        for(int i = 0; i < numCourses; i++) {
            graph[i] = new ArrayList<Integer>();
        }
        //build graph and initialiez indegree
        for(int[] prereq: prerequisites) {
            //course prereq[1] -> prereq[0]
            graph[prereq[1]].add(prereq[0]);
            degree[prereq[0]]++;
        }
        
        Queue<Integer> q = new LinkedList<Integer>();
        for (int i = 0; i < degree.length; i++) {
            if (degree[i] == 0) {
                q.offer(i);
            }
        }
        int count = 0;
        while (!q.isEmpty()) {
            int course = q.poll();
            count++;
            ArrayList<Integer> nexts = graph[course];
            for (int n: nexts) {
                degree[n]--;
                if (degree[n] == 0) q.offer(n);
            }           
        }
        return count == numCourses;
    }
