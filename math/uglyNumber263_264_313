https:://leetcode.com/problems/ugly-number/description/
   //time: O(lgN), space: O(1)
    public boolean isUgly(int num) {
        if (num <= 0) return false;
        while (num%2 == 0) num/=2;
        while (num%3 == 0) num/=3;
        while (num%5 == 0) num/=5;
        return num == 1;
    }
    
    //dynamic programming: time: O(N), space: O(N)
    public int nthUglyNumber(int n) {
        List<Integer> res = new ArrayList<Integer>();
        res.add(1);
        int m2 = 0, m3 = 0, m5 = 0;
        int i2 = 0, i3 = 0, i5 = 0;
        while (res.size() < n) {
            m2 = res.get(i2)*2;
            m3 = res.get(i3)*3;
            m5 = res.get(i5)*5;
            int min = Math.min(m2, Math.min(m3, m5));
            res.add(min);
            if (min == m2) i2++;
            if (min == m3) i3++;
            if (min == m5) i5++;
        }
        return res.get(res.size()-1);
    }
    
    //super ugly number (Google), time: O(N)
    https://leetcode.com/problems/super-ugly-number/description/
        public int nthSuperUglyNumber(int n, int[] primes) {
        int[] dp = new int[n];
        int[] idx = new int[primes.length];
        Arrays.fill(idx, 0);
        dp[0] = 1;
        for (int i = 1; i < n; i++) {
            dp[i] = Integer.MAX_VALUE;
            for (int j = 0; j < primes.length; j++) {
                dp[i] = Math.min(dp[i], dp[idx[j]]*primes[j]);
            }
            //advance the pointer of the selected prime's idx
            for (int j = 0; j < primes.length; j++) {
                if (dp[i] == dp[idx[j]]*primes[j]) idx[j]++;
            }
        }
        return dp[n-1];      
    }
    
    //priorityQueue, time O(lgN)
    //heap, time: O(NlgK)
    public int nthSuperUglyNumber(int n, int[] primes) {
       if (primes.length == 0 || n == 0) return 0;
       int[] nums = new int[n];
        nums[0] = 1;
        //min heap of size K
       Queue<Node> pq = new PriorityQueue<Node>();
       for (int i = 0; i < primes.length; i++) {
           //both value and prime are the same at the beginning
           pq.add(new Node(0, primes[i], primes[i]));
       }
        for (int i = 1; i < n; i++) {
            Node node = pq.peek();
            nums[i] = node.val;
            //update top element
            do {
                node = pq.poll();
                node.val = nums[++node.index]*node.prime;
                pq.offer(node);
                //prevent duplicate with the check
            } while (!pq.isEmpty() && nums[i] == pq.peek().val);
        }
        return nums[n-1];
    }
    
     static class Node implements Comparable<Node> {
        private int index;
        private int val;
        private int prime;

        public Node(int index, int val, int prime) {
            this.index = index;
            this.val = val;
            this.prime = prime;
        }
        public int compareTo(Node other) {
            return this.val - other.val;
        }
    }
    
