//the invariant is to keep the smallest element on the top of stack
public class BSTIterator {
    
    Stack<TreeNode> stack;
    
    public BSTIterator(TreeNode root) {
        stack = new Stack<TreeNode>();
        while (root != null) {
            stack.push(root);
            root = root.left;
        }
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return !stack.isEmpty();
    }

    /** @return the next smallest number */
    public int next() {
        TreeNode tn = stack.pop();
        int ret = tn.val;
        if (tn.right != null) {
            tn = tn.right;
            while (tn != null) {
                stack.push(tn);
                tn = tn.left;
            }
        }
        return ret;
    }
}
