Question

Given an array of integers, return the position of the maximum element. If the maximum element occurs multiple times, use a random number generator to choose one of the positions uniformly at random.

[edit]Setup

I typically write an example array on a whiteboard, annotated to include the probability with which each occurrence of the maximum value should be returned:

For additional signal, you may want to leave out the negative value to see if the candidate asks whether negative values can occur (the problem statement says "integers"), or just writes code assuming that they cannot.

# This version is the best possible: we do a single pass over the array, and only
# use a constant amount of additional space. The trick is to understand that we
# need to keep track of the index that we plan to return; each time we see the
# max value again, we overwrite our saved index with the current index with
# probability 1/x, where x is the number of times we've seen the max value so
# far.
#
# This particular implementation uses a floating point RNG.
#

class Solution {
  public static void main(String[] args) {
    int[] nums = new int[]{1,3,3,2,1};
    getIndexOfMaxValueUniformly(nums);
  }
  
  static void getIndexOfMaxValueUniformly(int[] nums){
    if (nums == null || nums.length == 0) 
      throw new IllegalArgumentException("Invalid input");
      int maxVal = nums[0], count = 1, idx = 0;
      Random r = new Random();
      for (int i = 1; i < nums.length; i++) {
        if (nums[i] > maxVal) {
          idx = i;
          maxVal = nums[i];
          count = 1;
        } else if (nums[i] == maxVal) {
          count++;
          if (r.nextInt(count) == 0) {
            idx = i; 
          }
 
        }
      }
      System.out.println("The Idx of max value is" + idx);
  }
  
}
