地里找人内推的，data infrastructure组，内推后2周HR联系电面：类似于missing range的简化版，并不难
Onsite 没有一轮问我做的project的，都是题目 
Three 哥，Design TinyURL，问了很多边边角角的东西，我觉得他全程好像都听不懂我说什么，我说一句他问一句，莫非是起床气太重了 
Lunch，也是和Three 哥一起吃，基本就是随便聊聊 貌似是黑人小哥，
1个半小时的Programming Test，题目Autocomplete，但并没有LC的那么难，不要求sentence，只是单纯的word，用Trie解决，也不难，但要保证最后可以运行出来（读文件 parse 打印），有需要的可以管我要原题，我留底了（攒人品LOL） 
Three哥面试官，大概就是设计一个能够监控lyft rider driver的dashboard，比如有多少个driver在线，available还是已经接了订单在路上，有多少rider在等车。
我先是把用户打车的流程化出来，然后再说每个流程中的component需要什么服务（payment，pricing，matching，rider，driver，route，transaction，navigation等等），然后再回答需要从哪几个service里面要数据，怎么用message queue等 
Data组的头头，白人，长得好艺术家（很胖，头发和胡子很长的那种），在他们公司外一边散步一边聊天，基本都是behavior，或者一些他们内部的情况，这个人是FB以前的data lead，还是spark项目的创建者之一，感觉很牛 整体感觉不算难，
除了第一轮其他都还好，programming test肯定过了，但design题目和behavior题目只能看命了。去之前听说他家office很漂亮，然而并没有感觉出来，他家的食堂也很迷你（可能是我去的那个楼是人比较少的楼所以就没那么高大上）。看缘分吧，move on了

链接: https://instant.1point3acres.com/thread/283643


输入是两个文件，第一个文件 每一行代表 word rank 比如 hello 6 world 10 wide 3 hell 4 worldwide 7 lyft 20 
第二个文件 代表要搜索的prefix 比如 hell world 输出是，根据第二个文件的每一个prefix，打印出来word rank，按照rank排序。
比如根据上边两个例子： hell: hell 4 hello 6 world: worldwide 7 world 10 
其实就是trie，外加需要记录rank信息，以及在打印的时候，需要把prefix打印出来。 根本不到LC那道题目的难度，也就是implement trie的扩展而已。


背景：两年安卓开发经验 面试流程：1轮白板+上机算法，1轮安卓设计，2轮安卓上机，1轮午餐，1轮Team lead 咖啡面试 
第一轮：白板+上机：在一个迷宫里面找到出口，followup是一些对解法的improvement 
第二轮：设计利福特一个feature，基本是客户端的架构，followup是一些edge cases应该点处理 
第三轮：吃饭聊天（然后安卓头头突然乱入说请我喝咖啡，然后深挖我做了啥，然后回来以后还有时间说说安卓的一个MVP怎么工作，妈的跪了） 
第四轮：安卓上机关于Timestamp转换，妈的，老子不知道直接stackoverflow跪了 
第五轮：安卓上机关于typeahead search，followup recyclerview优化 


1. 第一轮是1个小时的上机coding，可以自己带laptop，也可以用他们的 题目是LRU的增强版，给定一个输入文件，输入文件第一行是cache size，
第二行是一个数N，接下来N行每一行有一个URL，每一个URL是一张图片的链接，URL可以有重复，
例如： 100000 3 要求实现一个in memory LRU cache，然后输出一个文件，每一行对应于输入文件的每一行URL，
包含： （1）输入文件的URL地址 （2）这个URL是否在cache里，如果在cache里，输出IN CACHE，如果不在cache里，
下载这张图片放到cache里，然后输出DOWNLOADED （3）如果不在cache里，输出以byte表示的图片大小 
例如： DOWNLOADED 50000 DOWNLOADED 40000 IN CACHE DOWNLOADED 30000 DOWNLOADED 40000
程序写完之后会有两个人来评判，其中有一个人不看题只看代码，所以需要写注释。他们会给个U盘，里面好像有测试数据，但是我当时没听清楚所以做完了以后没测，
自己测下来程序感觉并没有什么问题。。

2. Lowest common ancestor in binary tree，问了几个follow up 
（1）如果输入的node不在树里面怎么办 
（2）如果两个node是相同的怎么办 
（3）如果有两个Thread同时访问这棵树会不会有问题？可不可以有办法不用synchronized？ 

3. 这一轮比较惨，出的题不太常规，我本来以为要出system design的。。 
有一个Callable interface，比如 public interface Callable { public void call(); } 
实现一个Class，这个class有三个Function void register(int signal, Callable cb); 
void unregister(int signal, Callable cb); void signal(int signal); 
register()就是把这个callable注册在一个signal之下，一个Signal可以对应多个Callable，unregister()就是移除这个callable，
signal()就是让所有注册在这个signal之下的callable全部去执行call() 
题目本身不难，用HashMap就行，关键是follow-up，面试官说你写的程序如果作为一个API library，
有好几个fundamental issues，让我找找看，我提了一个thread safe，比如一个thread在signal的时候另一个thread在unregister，
他说对，但是我当时没想出别的问题，我以为他要问我hashmap里面会不会有问题囧。。
https://www.techyourchance.com/thread-safe-observer-design-pattern-in-java/

1. 系统设计：设计一个可以预约车的系统。感觉答的不是很好，很多细节没有考虑到。会问到如何预约，如何发送提醒，data pipeline如何设计等等。
感觉有点像notification system. 
2. coding leetcode medium程度的，忘记什么了 
3. coding 在电脑上实现typeahead suggestion. 给出题以后，面试官就消失了，一个小时过后回来check。会给test cases。 
4. 和一个manager聊天 


上来大家自我介绍了15分钟，然后开始做题，就一道题，和下面贴子里面的一模一样。http://www.1point3ac... 
当时看了上面的贴子我还不是完全明白题目什么意思，和面试官交流后明白了要求什么。稍微解释下 
boolean allowDriverMode(shifts, current): shifts 就是一个的interval，按照顺时间顺序排好的，
比如[, , ] current就是当前时间。 时间不是24小时制的,可以是任意大于0的数字，比如 40或100. 给一个shifts，
给一个当前时间，求司机是否能进入驾驶模式。 在最近一次至少8小时休息后(必须是连续的休息时间)。 
如果司机已经驾驶过12个小时，则不能进入驾驶模式。 否则返回可以。

function to determine whether the driver is allowed to enter driver mode * 
drivers are not allowed to drive a total of 12 hours without an 8 hour break * 
the function inputs are: - a list of driver shifts as start/end integers, 
the integer is relative to lyft launch - the current time since lyft launch as
integer def can_drive(history, current_time): “”"
Returns true if the driver has driven less than 12 hours since their last 8 hour break history|array - 
Shifts, e.g. current_time|int - Current timestamp as hour since Lyft launch, e.g. 50 
can_drive = True example # 9 hour break, 1 hour shift, 2 hour break, 10 hour shift history = current_time = 24 
can_drive = False example: history = current_time = 24

/* You are analyzing Lyft driver patterns over one day. You are given a list of active Lyft driver sessions in the format , 
write a function to find the hour when the most drivers were active. example = [ {driver_id: 1, start: , end: }, …, ] */

第一轮：白板+上机：在一个迷宫里面找到出口，followup是一些对解法的improvement

LC238

smallest range

https://leetcode.com/problems/alien-dictionary/description/


店面 Ceasar Cipher 简单说就是 abc + 2 –> cde, xyz + 2 –> zab 不是字母不变 区分大小写 要求编译通过运行。


https://instant.1point3acres.com/thread/167253

https://instant.1point3acres.com/thread/202961

Design:
1. How to design a lyft line
https://eng.lyft.com/matchmaking-in-lyft-line-9c2635fe62c4
https://eng.uber.com/soa/
2. Design a coupon system

number of islands connected

  
class Solution {
  
  public static void main(String[] args) {
    Shift shift1 = new Shift(1, 2);
    Shift shift2 = new Shift(10, 20);
    Shift shift3 = new Shift(22, 25);
    List<Shift> shifts = Arrays.asList(shift1, shift2, shift3);
    boolean result = canDrive(shifts, 24);  
    System.out.println("Can shift: " + result);
  }
  
  static boolean canDrive(List<Shift> shifts, int curTime) {
    int driveHours = 0;
    Shift prev = null;
    boolean enoughBreak = false;
    for (Shift shift: shifts) {
        if (!enoughBreak) {
          if (prev == null) {
            if (shift.start >= 8) {
              enoughBreak = true;
            }
          } else if (shift.start - prev.end >= 8) {
            enoughBreak = true;
            driveHours = 0;
          } 
        } 
         
        if (curTime > shift.start && curTime < shift.end) {
          driveHours += curTime - shift.start;
        } else {
          driveHours += shift.end - shift.start;
        }
        prev = shift;
    }

    return enoughBreak && (driveHours <= 12);
  }
  
  static class Shift {
    int start;
    int end;
    public Shift(int start, int end) {
      this.start = start;
      this.end = end;
    }
  }
  

}
