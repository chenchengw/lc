 public List<List<Integer>> verticalOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(root==null)
            return result;
     
        // key is the level, value is a list of integers 
        HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();
     
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        Queue<Integer> level = new LinkedList<Integer>();
     
        queue.offer(root);
        level.offer(0);
     
        int minLevel=0;
        int maxLevel=0;
     
        while(!queue.isEmpty()){
            TreeNode p = queue.poll();
            int l = level.poll();
     
            if(!map.containsKey(l)){
                map.put(l, new ArrayList<Integer>());   
            }
            map.get(l).add(p.val);
     
            if(p.left!=null){
                queue.offer(p.left);
                level.offer(l-1);
                //keep track of the minimum level
                minLevel = Math.min(minLevel, l-1);
            }
     
            if(p.right!=null){
                queue.offer(p.right);
                level.offer(l+1);
                //keep track of the max level
                maxLevel = Math.max(maxLevel, l+1);
            }
        }
     
     
        for(int i=minLevel; i<=maxLevel; i++){
            if(map.containsKey(i)){
                result.add(map.get(i));
            }
        }
     
        return result;
    }
