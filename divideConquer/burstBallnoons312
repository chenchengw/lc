    //time: O(n^3)
    public int maxCoins(int[] nums) {
        if (nums.length == 0) return 0;
        //initialize new array
        int[] arr = new int[nums.length + 2];
        for (int i = 1; i < nums.length + 1; i++) {
            arr[i] = nums[i-1];
        }
        int n = arr.length;
        arr[0] = arr[n-1] = 1;
        
        //memo stores the answer from i to j
        int[][] memo = new int[n][n];
        return burst(arr, memo, 0, n-1);
    }
    
    private int burst(int[] nums, int[][] memo, int left, int right) {
        if (left + 1 == right) return 0;
        if (memo[left][right] > 0) return memo[left][right];
        int ans = 0;
        for (int i = left + 1; i < right; i++) {
            //nums[left]*nums[i]*nums[right] is the last one to burst
            ans = Math.max(ans, nums[left]*nums[i]*nums[right] + 
                           burst(nums, memo, left, i) + burst(nums, memo, i, right));
        }
        return memo[left][right] =ans;
    }
