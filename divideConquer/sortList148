    //mergeSort: O(nlgn)
    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null) return head;
        //split the list into two halves
        ListNode fast = head, slow = head, prev = null;
        while (fast != null && fast.next != null) {
            prev = slow;
            slow = slow.next;
            fast = fast.next.next;
        }
        prev.next = null;
        //note that the first list start with head, the second list start with slow
        ListNode l1 = sortList(head);
        ListNode l2 = sortList(slow);
        return merge(l1, l2);
    }
    
    private ListNode merge(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode ln = dummy;
        while (l1 != null && l2 != null) {
           int val1 = l1.val;
           int val2 = l2.val;
           if (val1 < val2) {
               ln.next = l1;
               l1 = l1.next;
           } else {
               ln.next = l2;
               l2 = l2.next;
           }
           ln = ln.next;
        }
        
        if (l1 != null) {
            ln.next = l1;
        }
        
        if (l2 != null) {
            ln.next = l2;
        }
        
        return dummy.next;
    }
