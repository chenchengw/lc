最长连续序列。 (exactly one larger than the one that came before it) ex: 1, 2, 5, 6 -> 1, 2 ex: 3, 5, 6, 7, 12 -> 5, 6, 7 
https://leetcode.com/problems/longest-continuous-increasing-subsequence/description/
follow up 变形：(exactly one larger than some number that came before it) ex: 1, 6, 2, 7, 3 -> 1, 2, 3 ex: 3, 5, 6, 7, 12 -> 5, 6, 7 
https://leetcode.com/problems/longest-increasing-subsequence/description/

sqrt() 变形 返回int， 但是跟leetcode 不同的是要返回平方后大于等于输入值的结果 比如输入15的话要返回4, 而不是3
https://leetcode.com/problems/sqrtx/description/



**/ 2. 第二轮 1. 类似于find target in rotated array不过是找的rotated的index在哪儿 
2. unique path I && II 

第一题找map中连续相同数字最多是多少，我用boolean【】【】判断是否visited，follow up就是看如何缩小这个space，
/** * @param matrix, a 2-d array (list of lists) of integers  
the size of the largest contiguous block (horizontally/vertically connected) of numbers with the same value 
int expected1 = 2; int matrix1 = new int {{1,2,3}, {4,1,6}, {4,5,1}}; 
int expected2 = 4;  int matrix2 = new int {{1,1,1,2,4}, {5,1,5,3,1}, {3,4,2,1,1}}; 
int expected3 = 11;  int matrix3 = new int {{3,3,3,3,3,1}, {3,4,4,4,3,4}, {2,4,3,3,3,4}, {2,4,4,4,4,4}}; 
int expected4 = 24; int matrix4 = new int{ {0,0,0,0,0}, {0,0,0,0,0}, {0,0,1,0,0}, {0,0,0,0,0}, {0,0,0,0,0}}; 

#dfs
123
416
451

11124
51531
34211

第二题是unique path，
follow up也是缩小space complexity

给一个BST的root，和两个node，求两个node的path 
第一轮lc原题： spiral matrix i & ii 
第二轮题大概是这样： // You’re given two sets of intervals, one for DoorDash and one for a restaurant, 
and you want to find when they are both open. These are hours in 24-hour times, but can be any arbitrary 
floating point numbers. // example: // D = // R = // =>

implement sqrt ＋ 一些些小的变化。

一轮电面很简单，就是permutation，不过不是数字 是character， abc这样的，输出abc， acb，bac，bca，cab，cba。
还有一个也是原题，add binary。
前天第一轮video，两轮两小时，美国小哥和美国小姐姐，题目也很简单，小姐姐的是spiral matrix，小哥的是找interval 的公共区间，和下面这个帖子说的一样。

第一轮： 系统设计， 设计airbnb database. 就是设计schema， tables，有哪些column，，，感觉面试官有点严厉。。。（原来以为会让设计 doordash api）
第二轮: white board coding, 类似leetcode 的word break， 不同之处是返回max length, 比如 dict , input: fireman, 有两种可能 以及 返回3 
第三轮： 午饭 
第四轮： sublime coding, spiral matrix

第一面问了Word break变形 输出有效break的可能里最多的break次数 比如词是“abbc”，字典是"a", "b", "bc", "ab", 
有两种可能 一种是a, b, bc, 一种ab, bc，要输出3 

然后转天就来2面了 第二面聊了很多简历上的事 感觉之前实习做的事还挺冷门的但是面试官表示他以前也有这方面的经验所以很感兴趣…问的超细致 
最后时间不多了他说就写个sqrt吧，也是返回int但是跟lc不同的是要返回平方后大于等于输入值的结果 比如输入15的话要返回4，
lc我记得是返回3 用二分写 写的倒是挺快的但是就在check mid >= n / mid时忘记了那个除是向下round的…于是有时就off by 1...
然后改了改最后对了但是感觉有点不好……希望有rp 

sqrt(x, precision)，返回正数x正平方根的浮点数结果，结果范围需要在±precision以内。

1. spiral matrix 只是開始的方向不太一樣
2. first missing positive in unsorted array


1.给定数组，求longest consecutive subarray 例如：输入｛1，4，5，6，8，10，11｝，输出｛4，5，6｝，这个用dp可解 
2.follow up 例子：输入｛1，4，2，5，3，9，10｝，输出｛1，2，3｝ 要求o(nlogn)解法，leetcode上有原题 
https://leetcode.com/problems/longest-increasing-subsequence/discuss/

第二轮： 1.给定长m,宽n，的格子，每次只能向下或向右走，问从最左上角走到最右下角，有多少种方法？dp可解 
2.实现sqrt，不同的是给定精度和target，返回一个精度范围内的值即可 

Given two strings of binary numbers (e.g. ‘101’ and ‘111’), return the sum of those two binary strings as another binary string


Summarize the gaps in a sorted array that should ideally contain consecutive numbers from 1 to K. For example when K=100, the array [3, 4, 5, 7, 75, 76] should give "1-2, 6, 8-74, 77-100" as output. 


You’re given two sets of intervals, one for LinkedIn and one for a Facebook, and you want to find when they are both open. These are hours in 24-hour times, but can be any arbitrary floating point numbers.
D = [(9, 12), (14, 17), (21, 23)]
R = [(8, 10), (11, 22)]
=> [(9, 10), (11, 12), (14, 17), (21, 22)]
You can assume the intervals within a list do not overlap. If they ask, you can assume the lists are sorted. You can assume that the tuple there is really an Interval struct/object with start and end for clarity; no need to write that out.


I want to learn all the store names which are on the Facebook website so people think I'm smart.
I opened up our alphabetical store directory to a random page, looking for stores I didn't know. I put each name I didn't know at increasing indices in a huge array I created in memory. When I reached the end of the directory, I started from the beginning and did the same thing until I reached the page I started at.
Now I have an array of store names that are mostly alphabetical, except they start somewhere in the middle of the alphabet, reach the end, and then start from the beginning of the alphabet. In other words, this is an alphabetically ordered array that has been "rotated." For example:
 names = [
    'MacLaren’s Pub',
    'Monk’s Cafe',
    'Paddy’s Pub',
    'Taco Town',
    'Xylophone Cafe',
    'Abdul’s Orange Chicken Emporium', # <-- rotates here!
    'Bob’s Burgers',
    'Central Perk',
    ‘Da Situation',
    'Krusty Krab',
    'Los Pollos Hermanos',
]


Write a function for finding the index of the "rotation point," which is where I started working from the beginning of the directory. This array is huge (there are lots of stores I don't know) so we want to be efficient here.

Given a grid of size m x n, count the number of paths from top-left cell to bottom-right cell if we can either move down or right from each cell in the grid.

Start |  R |    | 
  D   |    |    | 
      |    |    |  Goal
      
      
      
      
Facebook operates in N neighborhoods within San Francisco. You are given an array where arr[i] represents the number of deliveries made in neighborhood i. You need to return an array where result[i] is the number of deliveries made in all neighborhoods except neighborhood i and you cannot use subtraction.

Example:
13
78
95
203
89

Returns
78+95+203+89
13+95+203+89
13+78+203+89
13+78+95+89
13+78+95+203
      
Input   Output
13        78+95+203+89
78        13+95+203+89



Given any number n, how many ways can we express the number as the sum of 1, 3, and 4?

Example: Given n = 5, the answer is 6
5 = 1 + 1 + 1 + 1 + 1
5 = 1 + 1 + 3
5 = 1 + 3 + 1
5 = 3 + 1 + 1
5 = 1 + 4
5 = 4 + 1

Implement a fixed size in-memory cache. If the cache is full, evict elements based on the time that they were added to the cache, aka evict the most stale (oldest untouched) element when storage is full. 
(Include implementations for GET, SET, and UPDATE)

Connect 4
The purpose of this interview is to test the candidate’s ability to read code, understand it, and alter/refactor it to achieve a goal.

We are looking for detail orientation, the ability to code fluently, and software design skills (abstractions, elegance, etc.).  

To adjust for both time and nerves, the rubric allows points to be scored if the candidate can clearly describe the approach to the design portion of the interview (approach to robot players).

Generally speaking, try to move to the Robot players section of the interview if possible, when you have a good gauge on the candidate’s basic coding abilities, so we can gauge the candidate’s software design abilities.

Choose either one of the interview progressions.

Preparation
Candidates should be instructed to bring their own computers, but have a recruiting computer prepared just in case.  Make sure a basic editor is installed on the recruiting computer Atom is recommended (https://atom.io/).

Copy the README and appropriate starting code into a Coderpad or email the candidate the materials as a zip file.

Alternately, cut/paste the code into CoderPad -- this may actually be the best way to conduct the interview and is generally more interactive.
Interview Progression #1:
Implement win detection; and implement or describe how to do robot players.

https://github.com/doordash/doordash-interview/tree/master/connect4

Interview Progression #2:
Implement column-only input; and implement or describe how to do robot players.  Win detection already implemented.

https://github.com/doordash/doordash-interview/tree/master/connect4-refactor

Candidate Doesn’t Know Python or Java:
Give the option of whiteboard coding interview or proceeding with the existing harnesses in a pair programming manner.  

Interview Progression #1 is probably more suitable for whiteboard interviews.

For whiteboard coding, use the main base loop as a guide when getting to whiteboard coding.

Interview Progression #1 (more time consuming):
Get the basic game working:  implement win detection.
Robot player extension:  depending on time and how well the candidate has performed, have them code it or whiteboard it.  “Looking at the main game loop, how would you change the code to implement robot players?”
Extra Credit extensions:  at interviewer’s discretion, can go over some of the Extra Credit items earlier to earn the candidate some more points (also gives us more data points) if candidate seems high potential and is just having some trouble coding up a working solution.

Alternate Interview Progression #2 (recommended):
Starting with a harness that has win detection already implemented.

Alter code so that the user only needs to input column.
Robot player extension:  depending on time and how well the candidate has performed, have them code it or whiteboard it.  “Looking at the main game loop, how would you change the code to implement robot players?”
Extra Credit extensions:  at interviewer’s discretion, can go over some of the Extra Credit items earlier to earn the candidate some more points (also gives us more data points) if candidate seems high potential and is just having some trouble coding up a working solution.

Hinting for Interview Progressions:
Candidates can get tripped up with 0-index (how arrays are index) and 1-index (how the board displays row and column when running the program), so remind them of this if it seems like they are missing out on this.
For win detection, candidates sometimes may overthink the problem:  point out that they have the latest game state and last move made; and that they can assume that no win has previously been detected since this function is called after each move.
When discussing Robot players, sometimes candidates may do something really simple like assume that there is exactly 1 player and exactly 1 robot.  Hint them towards something more modular (Player interface with get_player_index() and get_next_move() functions, etc.).

Good Follow Up Questions (if time permits):
These are optimizations and just to get more data points if time permits.

Some candidates will suggest scanning the whole board or will scan entire rows, columns, or diagonals for win detection:  ask, what if the game board is huge?  Remind them that the win detection function is called after each turn and that a win has not been previously detected; and that they also have the details of the last move made.  Ideal solution would limit search for wins to constant time.
For column-only input, a reasonable approach might be to populate a valid row by checking the board from the bottom up.  Again, we can ask, what if the game board is huge?  (Good solution here would be to memo-ize the last populated row in a given column so you don’t have to search a column for the next valid spot.)

Rubric for Interview Progression #1 
Baseline (10 points total:  3 or less is Def. No; 4-5 is No; 6-7 is Yes; 8+ is Strong Yes)
1 pt.  Candidate is able to come to a good understanding of the problem. 
1 pt.  Candidate can solve win detection for Connect 4.
1 pt.  Candidate has good insights on win detection for Connect 4.
1 pt.  Candidate’s win detection code is clean.
1 pt.  Candidate can identify how to change the code to accommodate robot players. 
1 pt.  Candidate’s solution for robot players is modular.
2 pt.  Candidate can implement a working robot player. 
1 pt.  Candidate can identify how to change the code to accommodate robot vs robot.
1 pt.  Candidate can implement robot vs. robot.

Bonus (Can cover these items at interviewer’s discretion)
1 pt.  If user can do any extra credit items, at interviewer’s discretion; or candidate has good insights/observations/qualities not covered by rubric -- please detail in interview notes.


Rubric for Interview Progression #2 
Baseline (10 points total:  3 or less is Def. No; 4-5 is No; 6-7 is Yes; 8+ is Strong Yes)
1 pt.  Candidate is able to come to a good understanding of the problem. 
1 pt.  Candidate can refactor code to only require column input.
1 pt.  Candidate has good insights on column input solution.
1 pt.  Candidate’s column input code is clean.
1 pt.  Candidate can identify how to change the code to accommodate robot players. 
1 pt.  Candidate’s solution for robot players is modular.
2 pt.  Candidate can implement a working robot player. 
1 pt.  Candidate can identify how to change the code to accommodate robot vs robot.
1 pt.  Candidate can implement robot vs. robot.

Bonus (Can cover these items at interviewer’s discretion)
1 pt.  If user can do any extra credit items, at interviewer’s discretion; or candidate has good insights/observations/qualities not covered by rubric -- please detail in interview notes.


Package Dependency Manager
Problem
In the real world, we build software that is organized into packages that may depend on other packages. Systems like Apache Maven help us manage these dependencies. When we submit a package for compilation, all of the packages dependencies need to be compiled before the package itself can be compiled. How can a system like Maven figure out the right order to compile packages.
Expectations
ho
Packages should not be compiled more than once
Identify edge case of circular dependency and identify algorithm to detect it
Hints
Solutions
DFS with memoization: Use DFS and store calculated nodes in a set/hash. Cycle is present if we encounter a vertex already in the current DFS path.

Not a preferred solution:

Edge Removal:
[This is not preferred since we need to do #1 anyways to determine the sub-graph of relevant vertices, since there could be packages that our top-level package doesn’t depend on at all]
Store vertices in a min heap sorted by number of outgoing edges. When a vertex has no outgoing edges remove all incoming edges. Cycle is present if heap is not empty and all vertices have outgoing edges. 
Evaluation
Dealing with ambiguity
There is little bit of ambiguity in the question about how to represent packages and dependencies and the fact that there may be circular dependencies. It will be good to see candidates clarify these. The graph should be modeled where the directed edges represent a “depends on” relationship. For example, A → B means B needs to be compiled before A.
Problem Solving
Candidates should be able to functionally decompose the problem, identify base case in the recursion and modify their solution to detect cycles. 
Candidates should be able to identify interesting cases (don’t recompile packages if a package appears twice in the transitive dependency) 
Algorithms
DFS, BFS. DFS makes more sense here since we are not looking for shortest path.
Code
DFS with memoization:


Test cases:
A
Output: [A]

A -> A
Output: Exception

A -> B; B -> A
Output: Exception

A -> B; B -> C; A->C 
Output: [C, B, A]

Outcome
Definite fail if candidate does not get Expectation #1 and #2.
Definite pass if candidate does get Expectation #1, #2 and #3.
Use judgement if candidate does not get Expectation #3. 
Plus points for coming up with algorithm

























Package Dependency Manager
Problem
In the real world, we build software that is organized into packages that may depend on other packages. Systems like Apache Maven help us manage these dependencies. When we submit a package for compilation, all of the packages dependencies need to be compiled before the package itself can be compiled. How can a system like Maven figure out the right order to compile packages.
Expectations
ho
Packages should not be compiled more than once
Identify edge case of circular dependency and identify algorithm to detect it
Hints
Solutions
DFS with memoization: Use DFS and store calculated nodes in a set/hash. Cycle is present if we encounter a vertex already in the current DFS path.

Not a preferred solution:

Edge Removal:
[This is not preferred since we need to do #1 anyways to determine the sub-graph of relevant vertices, since there could be packages that our top-level package doesn’t depend on at all]
Store vertices in a min heap sorted by number of outgoing edges. When a vertex has no outgoing edges remove all incoming edges. Cycle is present if heap is not empty and all vertices have outgoing edges. 
Evaluation
Dealing with ambiguity
There is little bit of ambiguity in the question about how to represent packages and dependencies and the fact that there may be circular dependencies. It will be good to see candidates clarify these. The graph should be modeled where the directed edges represent a “depends on” relationship. For example, A → B means B needs to be compiled before A.
Problem Solving
Candidates should be able to functionally decompose the problem, identify base case in the recursion and modify their solution to detect cycles. 
Candidates should be able to identify interesting cases (don’t recompile packages if a package appears twice in the transitive dependency) 
Algorithms
DFS, BFS. DFS makes more sense here since we are not looking for shortest path.
Code
DFS with memoization:


Test cases:
A
Output: [A]

A -> A
Output: Exception

A -> B; B -> A
Output: Exception

A -> B; B -> C; A->C 
Output: [C, B, A]

Outcome
Definite fail if candidate does not get Expectation #1 and #2.
Definite pass if candidate does get Expectation #1, #2 and #3.
Use judgement if candidate does not get Expectation #3. 
Plus points for coming up with algorithm


Connect 4

Description

Complete the given terminal-based Connect 4 game:

Connect 4 is played on a 6 high x 7 wide grid.
There are two players.
Each player has different colored pieces.
During each round, each player has an opportunity to place a piece.
The board is filled from the bottom up: pieces are dropped into a column and stacked.
The first player to place 4 pieces in a line wins.
Winning lines can be vertical, horizontal, or diagonal.
A quick video on Connect 4: https://www.youtube.com/watch?v=yDWPi1pZ0Po

Complete and Enhance the Game

Get as far as you can, but the main goal is to get the basic game working. The initial code is provided only as a basic guide -- feel free to change it as necessary. Good luck!

Detect When Game Ends

Complete the game so it stops when a player win is detected.
Better User Interface

Streamline the input so that only a column input is required.
Enable Robot Players

Enhance the game so that players can be robots or humans: implement a “random move” robot.
Enhance the game to accommodate both human vs. robot and robot vs. robot.
Extra Credit (describe how or implement as time allows)

The board size is configurable.
There can be more than 2 players.
How to determine player order of turn?
How would you test the code?
Running

Python 3

$ brew install python3
$ python3 ./connect4.py --rows=6 --cols=7 --robots=0 --humans=2

>>>>> Board = 6 rows x 7 cols; Human Players = 2; Robot Players = 0

      1   2   3   4   5   6   7
  1   .   .   .   .   .   .   .
  2   .   .   .   .   .   .   .
  3   .   .   .   .   .   .   .
  4   .   .   .   .   .   .   .
  5   .   .   .   .   .   .   .
  6   .   .   .   .   .   .   .

Player #1 Move [ row, col ]:  ^C

Exiting...
Java

$ javac Connect4.java
$ java -Drows=6 -Dcols=7 -Dhumans=2 -Drobots=0 Connect4

$ java Connect4

>>>>> Board = 6 rows x 7 cols; Human Players = 2; Robot Players = 0

     1  2  3  4  5  6  7
  1  .  .  .  .  .  .  .
  2  .  .  .  .  .  .  .
  3  .  .  .  .  .  .  .
  4  .  .  .  .  .  .  .
  5  .  .  .  .  .  .  .
  6  .  .  .  .  .  .  .


Player #1 Move [ row, col ]:  6,1

     1  2  3  4  5  6  7
  1  .  .  .  .  .  .  .
  2  .  .  .  .  .  .  .
  3  .  .  .  .  .  .  .
  4  .  .  .  .  .  .  .
  5  .  .  .  .  .  .  .
  6  X  .  .  .  .  .  .


Player #2 Move [ row, col ]:  


import java.util.Arrays;
import java.util.Scanner;

public class Connect4 {

    static final String[] PLAYER_SYMBOLS = new String[]{"X", "O", "A", "B", "C", "D", "E", "Y", "Z", "H"};

    public final int numRows;
    public final int numCols;
    private final int[][] board;
    private final int humans;
    private final int robots;
    private final int players;

    class Move {
        public final int playerIndex;
        public final int row;
        public final int col;

        public Move(int playerIndex, int row, int col) {
            this.playerIndex = playerIndex;
            this.row = row;
            this.col = col;
        }
    }

    public Connect4(int rows, int cols, int humans, int robots) {
        this.board = new int[rows][cols];
        for (int i = 0; i < rows; i++) {
            Arrays.fill(board[i], -1);
        }
        this.numRows = rows;
        this.numCols = cols;
        this.humans = humans;
        this.robots = robots;
        this.players = humans + robots;
    }

    /**
     * TODO:  IMPLEMENT!
     *
     * This method is called after each move.
     *
     * @param board = 2 dimensional index of player indexes which are 0 or greater
     * @param lastMove = Move object representing the last move made
     * @return index of winning player; -1 if no winner detected
     */
    public int winningPlayerIndex(int[][] board, Move lastMove) {

        return -1;
    }



    public String getUserInput(String prompt) {
        // create a scanner so we can read the command-line input
        Scanner scanner = new Scanner(System.in);

        //  prompt for the user's name
        System.out.print(prompt);

        // get their input as a String
        String userInput = scanner.next();

        return userInput;
    }

    public void printBoard(int[][] board, String[] playerSymbols) {
        System.out.println("\n" + boardTerminalString(board, PLAYER_SYMBOLS) + "\n");
    }

    public String boardTerminalString(int[][] board, String[] playerSymbols) {
        StringBuilder sb = new StringBuilder();
        sb.append("   ");
        for (int col = 0; col < numCols; col++) {
            sb.append(String.format("%1$" + 3 + "s", col + 1 + ""));
        }
        sb.append("\n");
        for (int row = 0; row < numRows; row++) {
            sb.append(String.format("%1$" + 3 + "s", row + 1 + ""));
            for (int col = 0; col < numCols; col++) {
                int playerIndex = board[row][col];
                String playerSymbol = playerIndex > -1 ? PLAYER_SYMBOLS[playerIndex] : ".";
                playerSymbol = String.format("%1$" + 3 + "s", playerSymbol);
                sb.append(playerSymbol);
            }
            sb.append("\n");
        }
        return sb.toString();
    }

    public boolean isValidMove(Move move) {
        if (move == null || move.row < 0 || move.col < 0) {
            return false;
        }

        if (move.row >= numRows || move.col >= numCols) {
            return false;
        }

        // can't place over existing piece
        if (board[move.row][move.col] > -1) {
            return false;
        }

        // check that we are stacking if not on bottom row
        if (move.row < numRows - 1 && board[move.row + 1][move.col] < 0) {
            return false;
        }

        return true;
    }

    public void updateBoard(int[][] board, Move move) {
        board[move.row][move.col] = move.playerIndex;
    }

    /**
     * @param playerIndex
     * @param moveString
     * @return Move object or null if unable to parse
     */
    public Move parseMove(int playerIndex, String moveString) {
        try {
            String[] tokens = moveString.split(",");
            if (tokens.length < 2) {
                return null;
            }
            int row = Integer.parseInt(tokens[0].trim());
            int col = Integer.parseInt(tokens[1].trim());
            return new Move(playerIndex, row - 1, col - 1);
        } catch (Exception e) {
            return null;
        }
    }

    public void start() {
        while (true) {
            int moveCount = 0;
            for (int currentPlayerIndex = 0; currentPlayerIndex < players; currentPlayerIndex++) {
                printBoard(board, PLAYER_SYMBOLS);
                Move move = null;
                while (true) {
                    String moveString = getUserInput("Player #" + (currentPlayerIndex + 1) + " Move [ row, col ]:  ");
                    move = parseMove(currentPlayerIndex, moveString);
                    if (isValidMove(move)) {
                        updateBoard(board, move);
                        moveCount++;
                        break;
                    } else {
                        System.out.println("INVALID MOVE");
                    }
                }// while
                if (currentPlayerIndex == winningPlayerIndex(board, move)) {
                    printBoard(board, PLAYER_SYMBOLS);
                    System.out.println("\n\nPlayer #" + (currentPlayerIndex + 1) + " wins!\n\n");
                    System.exit(0);
                }
                if (moveCount == numRows * numCols) {
                    printBoard(board, PLAYER_SYMBOLS);
                    System.out.println("\n\nIt's a draw!");
                    System.exit(0);
                }
            }// for
        }// while
    }

    public static void main(String[] args) throws Throwable {
        int rows = int32OrDefault(System.getProperty("rows"), 6);
        int cols = int32OrDefault(System.getProperty("cols"), 7);
        int humans = int32OrDefault(System.getProperty("humans"), 2);
        int robots = int32OrDefault(System.getProperty("robots"), 0);

        System.out.println("\n>>>>> Board = " + rows + " rows x " + cols + " cols; Human Players = " + humans + "; Robot Players = " + robots + "\n\n");

        Connect4 game = new Connect4(rows, cols, humans, robots);
        game.start();
    }

    public static int int32OrDefault(String in, int defaultValue) {
        if (in == null || in.trim().length() == 0) {
            return defaultValue;
        }
        return Integer.parseInt(in);
    }

}






















