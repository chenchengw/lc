//time complexity: 2^1 + 2^2 + ... + 2^(n-1). bounded by O(2^n)
//branching factor 2, plus, minus, neither
    public int findTargetSumWays(int[] nums, int S) {
        if (nums == null || nums.length == 0) return 0;
        int n = nums.length;
        int[] memo = new int[n];
        memo[n-1] = nums[n-1];
        for (int i = n-2; i>=0; i--) {
            memo[i] = nums[i] + memo[i+1];
        }
        return helper(nums, S, 0, 0, memo);
    }
    
    int helper(int[] nums, int S, int start, int sum, int[] memo) {
        int res = 0;
        if (start == nums.length) {
            if (sum == S) {
                res++;
            }
            return res;
        }
        //prunning
        if (memo[start] < S - sum) return 0;
        res += helper(nums, S, start+1, sum+nums[start], memo);
        res += helper(nums, S, start+1, sum-nums[start], memo);
        return res;
    }  
