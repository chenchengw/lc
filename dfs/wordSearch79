    public boolean exist(char[][] board, String word) {
        //the word can start from any position of the board
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (dfs(board, word, i, j, 0) == true) return true;
            }
        }
        return false;
    }
    
    boolean dfs(char[][] board, String word, int i, int j, int start) {
        if (start == word.length()) {
           return true;
        }
        if (i < 0 || i == board.length || j < 0 || j == board[0].length) {  
           return false;
        }
        if (board[i][j] == word.charAt(start)) {
            //mark the letter to avoid same position to visit twice
            board[i][j] ^= 256;
            boolean exist = dfs(board, word, i+1, j, start+1) || dfs(board, word, i-1, j, start+1) ||
                dfs(board, word, i, j+1, start+1) || dfs(board, word, i, j-1, start+1); 
            board[i][j] ^=256;
            return exist;
        } else {
            return false;
        }
    }
