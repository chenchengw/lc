    final static int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    //topdown with memorization 
    public int longestIncreasingPath(int[][] matrix) {
        int m = matrix.length;
        if (m == 0) return 0;
        int n = matrix[0].length;
        int res = 1;
        //dp stores the length of longest increasing path that starts at (i, j)
        int[][] dp = new int[m][n]; 
        for (int i = 0; i < m; i++) 
            for (int j = 0; j < n; j++)
                res = Math.max(res, dfs(matrix, dp, i, j, m, n));
        return res;
    }
    
    public int dfs(int[][] matrix, int[][] dp, int i, int j, int m, int n) {
        if (dp[i][j] != 0) return dp[i][j];
        int max = 1;
        for (int[] dir: dirs) {
            int x = i + dir[0], y = j + dir[1];
            //matrix[x][y] <= matrix[i][j] to prevent revisiting the same node
            if (x < 0 || x == m || y < 0 || y == n || matrix[x][y] <= matrix[i][j]) continue;
            int len = 1 + dfs(matrix, dp, x, y, m, n);
            max = Math.max(max, len);
        }
        dp[i][j] = max;
        return max;
    }
