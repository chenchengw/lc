    public int trap(int[] height) {
       if (height.length < 3) return 0;
        int l = 0, r = height.length - 1;
        //find the first left max value
        while (l < r && height[l] <= height[l+1]) l++;
        //find the first right max value
        while (l < r && height[r] <= height[r-1]) r--;
        int sum = 0;
        while (l < r) {
            int leftMax = height[l];
            int rightMax = height[r];
            //if leftMax < rightMax, add left trapping water first
            if (leftMax < rightMax) {
                while (l < r && height[++l] < leftMax) {
                    sum += leftMax - height[l];
                }
            } else {
                while (l < r && height[--r] < rightMax) {
                    sum += rightMax - height[r];
                }
            }
        }
        return sum;
    }
