      //Use one hash table
     public String minWindow(String s, String t) {
        int[] hash = new int[256];
        for(char c: t.toCharArray()) {
            hash[c]++;
        }
        int left = 0, right = 0, count = t.length(), minLen = Integer.MAX_VALUE;
        String minStr = "";
        while (right < s.length()) {
            if (hash[s.charAt(right++)]-- > 0) {
                count--;
            }
            while (count == 0) {
                if (right - left < minLen) {
                    minLen = right - left;
                    minStr = s.substring(left, right);
                }
                if (hash[s.charAt(left++)]++ >= 0) {
                    count++;
                }
            }
        }
        return minStr;
    }
   
   
   //use two hashtables
       public String minWindow(String s, String t) {
        int ans = Integer.MAX_VALUE;
        String minStr = "";
        int[] sc = new int[256];
        int[] tc = new int[256];
        for(char c: t.toCharArray()) {
            tc[c]++;
        }
        
        int j = 0;
        for (int i = 0; i < s.length(); i++) {
            while (!valid(sc, tc) && j < s.length()) {
                sc[s.charAt(j)]++;
                j++;
            }
            if (valid(sc, tc)) {
                //no need to write j -i + 1 as j increased in the while loop
                if (ans > j - i) {
                    ans = Math.min(ans, j - i);
                    minStr = s.substring(i, j);
                }
            }
            sc[s.charAt(i)]--;
        }
        return minStr;
    }
    
    boolean valid(int[] sc, int[] tc) {
        for (int i = 0; i < 256; i++) {
            //note that we use sc[i] < tc[i] as condition 
            if (sc[i] < tc[i]) return false;
        }
        return true;
    }
    

