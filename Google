1. give a string, all 1 or 0, we can flip a 0 to 1, find the longest 1 substring after the flipping

这是一个简单版本of LC 424 Longest Repeating Character Replacement

又是Window, 又是Two Pointers

Window还是采用每次都try to update left使得window valid, 每次都检查最大window

public class LongestOneSubstr {
    
    public static int find2(String str) {
        if (str==null || str.length()==0) return 0;
        int l = 0, r = 0;
        int maxLen = 0;
        int countZero = 0;
        for (r=0; r<str.length(); r++) {
            if (str.charAt(r) == '0') countZero++;
            while (countZero > 1 && l < str.length()) {
                if (str.charAt(l) == '0') countZero--;
                l++;
            }
            maxLen = Math.max(r-l+1, maxLen);
        }
        return maxLen;
    }

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        System.out.println(find2("10111000010110111101101010101"));
    }

}


2. Implement a simple stock price display systemwhich will show High, Low and Last price for a given stock throughout one day.The data comes from a real-time feed and have the following messages:
PriceUpdate(t, P) -> Price of Stock A at timet is P.
Correction(t, NewP) -> Price of Stock A attime t is rectified to NewP
Remove(t) -> Disregard the price feedreceived at time t.
PriceUpdate(10100,850.50) -> high = 850.50, Low = 850.50, Last = 850.50
PriceUpdate(10200,852.25) -> high = 852.25, Low = 850.50, Last = 852.25
PriceUpdate(10300,848.00) -> high = 852.25, Low = 848.00, Last = 848.00
Correction(10200, 849.00) -> high = 850.50, Low = 848.00, Last 848.00
PriceUpdate(10400,855.00)  -> high = 855.00, Low = 848.00, Last = 855.00
Correction(10300, 853.00) -> high = 855.00, Low = 850.50, Last = 855.00
PriceUpdate(10500,854.00) -> high = 855.00, Low = 848.00, Last = 854.00
Correction(10500,853.25) -> high = 855.00, Low = 848.00, Last = 853.25
Remove(10300) -> high = 855.00, Low = 849.00, Last = 853.25

简单说来PriceUpdate就是添加新的（timestamp, price）, Correction是改之前的(timestamp, price), 求实现当前high(), low(), last()
感觉需要2个数据结构：
1. TreeMap<Long, Double> time2priceMap. 
2. TreeMap<Double, Integer> price2countMap

priceupdate: insert new record into time2priceMap, update price count in price2countmap
correction: update record in time2pricemap, update prev price count, update prev price count (if 0, remove record), update new price count or needs to insert a new price record into price2countmap
high and low: lastkey and firstkey from price2countmap
last: last entry's price from time2pricemap


3.
https://leetcode.com/problems/encode-string-with-shortest-length/description/

public class Solution {
    public String encode(String s) {
        if (s==null || s.length()==0) return "";
        String[][] dp = new String[s.length()][s.length()];
        
        for (int len=0; len<s.length(); len++) {
            for (int i=0; i+len<s.length(); i++) {
                int j = i + len;
                String subStr = s.substring(i, j+1);
                dp[i][j] = subStr; //initialize
                if (len < 4) continue;
                for (int k=i; k<j; k++) {
                    if (dp[i][k].length() + dp[k+1][j].length() < dp[i][j].length()) {
                        dp[i][j] = dp[i][k] + dp[k+1][j];
                    }
                }
                
                //check if subStr has repeat pattern
                for (int k=i; k<j; k++) {
                    String repeat = s.substring(i, k+1);
                    if (subStr.length()%(k-i+1)==0 && subStr.replaceAll(repeat, "").length()==0) {
                        String ss = subStr.length()/repeat.length() + "[" + dp[i][k] + "]";
                        if (ss.length() < dp[i][j].length()) 
                            dp[i][j] = ss;
                    }
                }
            }
        }
        return dp[0][s.length()-1];
    }
}

4. 求string str1中含有string str2 order的 subsequence 的最小长度
举个例子： str1 = "acbacbc"   str2="abc", 那么最小subsequence长度应该是4， 对应的subsequence是“acbc”

O(n^2) O(1)
public class ShortestSequence {
        public static void main(String[] args) {
                System.out.println(getShortestSequence("acbacbc", "abc"));
        }
        public static int getShortestSequence(String s1, String s2) {
                if (s1.length() < s2.length()) {
                        return Integer.MAX_VALUE;
                }
                int res = Integer.MAX_VALUE;
                for (int i = 0; i < s1.length(); i++) {
                        if (s1.charAt(i) == s2.charAt(0)) {
                                int j = i;
                                int k = 0;
                                while (j < s1.length() && k < s2.length()) {
                                        if (s1.charAt(j) == s2.charAt(k)) { 
                                                j++;
                                                k++;
                                        } else {
                                                j++;
                                        }
                                }
                                if (k == s2.length()) {
                                        res = Math.min(res, j - i);
                                }
                        }
                }
               
               
                return res;
        }
}

5. 设定一个pattern 把 'internationalization' 变成 'i18n', 比如word是house，pattern可以是h3e, 3se, 5, 1o1s1等，
给pattern和word，判断是否match，
  public static void main(String[] args) {
      System.out.println(isMatch("houskjfjjsdke", "h11e"));
  }
  
  static boolean isMatch(String s, String p) {
    if (p.length() == 0) return s.length() == 0;
    if (Character.isLetter((p.charAt(0)))) {
       if (s.charAt(0) != p.charAt(0)) return false;
       return isMatch(s.substring(1), p.substring(1));
    } else {
      int num = 0, i = 0;
      while(i < p.length() && Character.isDigit(p.charAt(i))) {
        num *= 10;
        num += p.charAt(i) - '0';
        i++;
      } 
      if (num > s.length()) return false;
      return isMatch(s.substring(num), p.substring(i));
    }
  }
  
  6. Data Stream Average
  
  package DataStreamAverage;

class Solution {
  public static void main(String[] args) {
     DataStream ds = new DataStream(3);
     ds.add(1);
     ds.add(2);
     ds.add(3);
     System.out.println(ds.average());
  }
  
}

class DataStream {
    
    int capacity;
    Queue<Integer> q;
    int sum;
    int count;
    
    public DataStream(int capacity){
       this.capacity = capacity;
      q = new LinkedList<>();
    }
    public void add(int num) {
       sum += num;
       count++;
       q.offer(num);
      if (count > capacity) {
        int last = q.poll(); 
        sum -= last;
        count--;
      }
    }
    
    public double average() {
      if (count > 0) {
        return (double) sum/count;
      } else {
        return 0.0; 
      }
    }
  
  }

7. Android Phone unlock pattern
https://leetcode.com/problems/android-unlock-patterns/description/

1 2 3
4 5 6
7 8 9
只有中间没有其他键的两个键才能相连，比如1可以连 2 4 5 6 8 但不能连 3 7 9
但是如果中间键被使用了，那就可以连，比如5已经被使用了，那1就可以连9
每个键只能用一次，给定一个长度L，求问有多少unique path with length L

class Solution {
    int[][] jumps;
    boolean[] visited;
    
    public int numberOfPatterns(int m, int n) {
        jumps = new int[10][10];
        jumps[1][3] = jumps[3][1] = 2;
        jumps[4][6] = jumps[6][4] = 5;
        jumps[7][9] = jumps[9][7] = 8;
        jumps[1][7] = jumps[7][1] = 4;
        jumps[2][8] = jumps[8][2] = 5;
        jumps[3][9] = jumps[9][3] = 6;
        jumps[1][9] = jumps[9][1] = jumps[3][7] = jumps[7][3] = 5;
        visited = new boolean[10];
        int count = 0;
        count += helper(1, 1, 0, m, n)*4; //1, 3, 7, 9 are symmetrical
        count += helper(2, 1, 0, m, n)*4; //2, 4, 6, 8 are symmetrical
        count += helper(5, 1, 0, m, n);
        return count;
    }
    
    int helper(int num, int len, int count, int m, int n) {
        if (len >= m) count++; //at least m
        len++;
        if (len > n) return count; // at most n
        visited[num] = true;
        for (int next = 1; next <= 9; next++) {
            int jump = jumps[num][next];
            if (!visited[next] && (jump == 0 || visited[jump])) {
                count = helper(next, len, count, m, n);
            }
            
        }
        visited[num] = false;
        return count;    
    }
}

8. Given a sorting order string, sort the input string based on the given sorting order string. Ex sorting order string -> dfbcae 
Input string -> abcdeeabc 
output -> dbbccaaee

//counting sort
  int[] count = new int[order.length()];
        Queue<Character> notInOrder = new LinkedList<Character>();
        StringBuffer sb = new StringBuffer();
        for (int i=0; i<str.length(); i++) {
            boolean matched = false;
            char cur = str.charAt(i);
            for (int j=0; j<order.length(); j++) {
                if (cur == order.charAt(j)) {
                    count[j]++;
                    matched = true;
                    break;
                }
            }
            if (!matched) notInOrder.offer(cur);
        }
        for (int i=0; i<count.length; i++) {
            while (count[i] > 0) {
                sb.append(order.charAt(i));
                count[i]--;
            }
        }
        while (!notInOrder.isEmpty()) {
            sb.append(notInOrder.poll());
        }
        System.out.println(sb.toString());
    }
    
9. 第二题 算法 给你一个arr 返回 T 或者 F
arr的每个数代表从这个点开始跳几部，返回T的情况：从这个arr中任意一个数开始跳，可以在每个元素都跳到且只跳到一次的情况下返回到开始跳的元素
比如[1,1,1,1,1,1] => T
[0,1,1,1,1,1]=> F
[7, 5, 2, 3] => F
[2,2,3,1] => T. 

package JumpGameReturnToOrigin;
import java.util.*;

public class Solution {
    public boolean check(int[] arr) {
        HashSet<Integer> set = new HashSet<Integer>();
        for (int i=0; i<arr.length; i++) {
            set.add((i + arr[i]) % arr.length);
        }
        if (set.size() == arr.length) return true;
        else return false;
    }

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        Solution sol = new Solution();
        boolean res = sol.check(new int[]{1,1,1,1,1,1,1});
        if (res) System.out.println("True");
        else System.out.println("False");
    }

}

10. 给你一个arr 返回 T 或者 F
arr的每个数代表从这个点开始跳几部，返回T的情况：从这个arr中任意一个数开始跳，可以在每个元素都跳到且只跳到一次的情况下返回到开始跳的元素
比如[1,1,1,1,1,1] => T
[0,1,1,1,1,1]=> F
[7, 5, 2, 3] => F
[2,2,3,1] => T. 

            public boolean check(int[] arr) {
                if(arr == null || arr.length == 0 ) return false;
                if(arr.length == 1) return arr[0] == 0;
                int n = arr.length;
                HashSet<Integer> jump = new HashSet<Integer>();
               
                for(int i = 0; i < arr.length; i++){
                        int next = (i + arr[i]) % n;
                        if(!jump.add(next)) return false;
                }
                return jump.size() == arr.length;
              }
              
 11. 求问下各位大神，怎么判断一个按照Preorder traversal serialized的binary tree的序列是否正确呢？不能deserialize成树比如
2 A） 9 3 4 # # 1 # # 2 # 6 # #是对的，因为表示
3            9
4          /   \
5        3      2
6       /  \      \
7     4    1      6    
8 B ) 9 3 4 # # 1 # #就是错的，因为无法反构造回一棵树
 
 import java.util.*;

public class Solution {
    public boolean check(String str) {
        String[] strs = str.split(" ");
        Stack<String> stack = new Stack<String>();
        for (int i=0; i<strs.length; i++) {
            if (stack.size()>=2 && strs[i].equals("#") && stack.peek().equals("#")) {
                stack.pop();
                stack.pop();
                i--;
            }
            else stack.push(strs[i]);
        }
        if (stack.size()==1 && stack.peek().equals("#")) return true;
        else return false;
    }

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        Solution sol = new Solution();
        boolean res = sol.check("9 3 4 # # 1 # # 2 # 6 # # #");
        if (res) System.out.println("true");
        else System.out.println("false");
    }

}

12. 给定一个字符串，找出最多有多少个chunked palindrome,

正常的palindrome是abccba, chunked palindrome的定义是：比如volvo, 可以把vo划分在一起，(vo) (l) (vo)，那么它是个palindrome。求实现返回最大的chunk 数量。

比如aaaaaa可以是(aaa)(aaa), 但是最大chunk数量应该是(a)(a)(a)(a)(a)(a)为6

    public int countChunk(String str) {
        if (str==null || str.length()==0) return 0;
        int sum = 0;
        int l=0, r=str.length()-1;
        int preL = l, preR = r;
        while (l < r) {
            String left = str.substring(preL, l+1);
            String right = str.substring(r, preR+1);
            if (left.equals(right)) {
                preL = l+1;
                preR = r-1;
                sum += 2;
            }
            l++;
            r--;
        }
        if (preL <= preR) sum+=1;
        return sum;
    }
    
13. 给你一部分钱和一些不同价钱的商品，如何在最多买K件商品的情况下尽可能多的花掉手里的钱。
举例：口袋里的钱数： 10;   K=2     产品价格: [3, 6, 8, 7, 9]   输出 3, 7

   static int minRemain = 0;

    public ArrayList<Integer> optimize(int money, int[] prices, int k) {
        ArrayList<Integer> result = new ArrayList<Integer>();
        ArrayList<Integer> path = new ArrayList<Integer>();
        minRemain = money;
        helper(result, path, money, prices, 0, k);
        return result;
    }
    
    public void helper(ArrayList<Integer> result, ArrayList<Integer> path, int remain, int[] prices, int pos, int times) {
        if (remain < 0 || times<0) return;
        if (remain < minRemain) {
            minRemain = remain;
            result.clear();
            result.addAll(path);
        }
        for (int i=pos; i<prices.length; i++) {
            path.add(prices[i]);
            helper(result, path, remain-prices[i], prices, i+1, times-1);
            path.remove(path.size()-1);
        }
        
    }

14. Define “X-Straight” as X cards with consecutive numbers (X >= 3). Determine if the deck can be fully divided into sets of “X-Straight”.
Example: 1, 2, 3, 4, 4, 5, 6 -> True
package Straight;
import java.util.*;

public class Solution2 {
    HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
    public boolean determine(int[] arr) {
        for (int elem : arr) {
            if (!map.containsKey(elem)) {
                map.put(elem, 1);
            }
            else map.put(elem, map.get(elem)+1);
        }
        return helper(arr, 0);
    }
    
    public boolean helper(int[] arr, int pos) {
        if (pos == arr.length) return true;
        int cur = arr[pos];
        for (int k=3; k<map.keySet().size(); k++) {
            HashMap<Integer, Integer> copy = new HashMap<Integer, Integer>(map);
            for (int i=cur; i<cur+k; i++) {
                if (!map.containsKey(i)) return false;
                if (map.get(i) == 0) return false;
                map.put(i, map.get(i)-1);
            }
            while (pos<arr.length && map.get(arr[pos]) == 0) pos++;
            if (helper(arr, pos))
                return true;
            map = copy;
        }
        return false;
        
    }
    
    15. 

想想如果你用linkedin或者facebook， 给你一个人和他的朋友关系网，你会怎么给一个人推荐朋友

一个例子就是A-B, A-C, B - D, B - E, C - D，这个时候问我应该推荐谁给A，我说D,因为他是BC的共同好友，而E只是B的好友,到这我才明白干啥，就是给一个图和里面的一个节点A,用bfs从A出发，找出第二层中indegree度数最大节点

用HashMap<Character, HashSet<Character>>来建图

用HashMap<Character, Integer> SndIndegree来表示第二层indegree数目

用maxIndegree记录第二层Indegree最大值

用res记录第二层Indegree最大者


        public char recommend(char tar, char[][] arr) {
        HashMap<Character, HashSet<Character>> graph = new HashMap<Character, HashSet<Character>>();
        HashMap<Character, Integer> SndIndegree = new HashMap<Character, Integer>();
        
        
        //build graph
        for (char[] edge : arr) {
            if (!graph.containsKey(edge[0])) graph.put(edge[0], new HashSet<Character>());
            if (!graph.containsKey(edge[1])) graph.put(edge[1], new HashSet<Character>());
            graph.get(edge[0]).add(edge[1]);
            if (!SndIndegree.containsKey(edge[0])) SndIndegree.put(edge[0], 0);
            if (!SndIndegree.containsKey(edge[1])) SndIndegree.put(edge[1], 0);
        }
        
        Queue<Character> queue = new LinkedList<Character>();
        HashSet<Character> visited = new HashSet<Character>();
        int level = 0;
        queue.offer(tar);
        visited.add(tar);
        int PNum = 1;
        int CNum = 0;
        int maxIndegree = 0;
        char res = '\0';
        while (!queue.isEmpty()) {
            char cur = queue.poll();
            PNum--;
            for (Character neigh : graph.get(cur)) {
                if (level+1 == 2) {
                    if (neigh == tar) continue;
                    int curIndegree = SndIndegree.get(neigh)+1;
                    if (curIndegree > maxIndegree) res = neigh.charValue();
                    SndIndegree.put(neigh, curIndegree);
                }
                else { //not second level
                    if (!visited.contains(neigh)) {
                        queue.offer(neigh);
                        CNum++;
                        visited.add(neigh);
                    }
                }
            }
            if (PNum == 0) {
                PNum = CNum;
                CNum = 0;
                level++;
            }
        }
        return res;
    }
