//Solution 1:
  public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if (headA == null || headB == null) return null;
        int lenA = getLength(headA), lenB = getLength(headB);
        if (lenA > lenB) {
            for (int i = 0; i < lenA - lenB; ++i) headA = headA.next;
        } else {
            for (int i = 0; i < lenB - lenA; ++i) headB = headB.next;
        }
        while (headA != null && headB != null && headA != headB) {
            headA = headA.next;
            headB = headB.next;
        }
        return (headA != null && headB != null) ? headA : null;
    }
    public int getLength(ListNode head) {
        int cnt = 0;
        while (head != null) {
            ++cnt;
            head = head.next;
        }
        return cnt;
    }
    
    //solution 2: make the linked list like a cycle
        //list a: a1 -> a2 -> c1 -> c2 -> c3 -> b1 -> b2 -> b3 -> c1
    //list b: b1 -> b2 -> b3 -> c1 -> c2 -> c3 -> a1 -> a2 -> c1
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if (headA == null || headB == null)  return null;
        ListNode a = headA, b = headB;
        while (a != b) {
            a = (a != null) ? a.next: headB;
            b = (b != null) ? b.next : headA;
        }
        return a;
    }
