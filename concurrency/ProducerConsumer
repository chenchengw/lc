http://www.geeksforgeeks.org/producer-consumer-solution-using-threads-java/

public static class producerConsumer {
    Queue<Integer> q = new LinkedList<>();
    int capacity = 2;
    
    public void produce() throws InterruptedException {
       int value = 0;
       while (true) {
        synchronized(this) {
            while (q.size() == capacity) {
                wait();
            }
            q.offer(value++);
            notify();
            
       }
    }
    
     public void consume() throws InterruptedException {
       int value = 0;
       while (true) {
        synchronized(this) {
            while (q.size() == 0) {
                wait();
            }
            int val = q.poll();
            System.out.println("consumed" + val);
            notify();       
       }
    }   
    
    
  
public class SynchronizedHashMapWithReadWriteLock {
 
    Map<String,String>  syncHashMap = new HashMap<>();
    ReadWriteLock lock = new ReentrantReadWriteLock();
    //...
    Lock writeLock = lock.writeLock();
 
    public void put(String key, String value) {
        try {
            writeLock.lock();
            syncHashMap.put(key, value);
        } finally {
            writeLock.unlock();
        }
    }
    ...
    public String remove(String key){
        try {
            writeLock.lock();
            return syncHashMap.remove(key);
        } finally {
            writeLock.unlock();
        }
    }
    //...
}
    Lock readLock = lock.readLock();
//...
public String get(String key){
    try {
        readLock.lock();
        return syncHashMap.get(key);
    } finally {
        readLock.unlock();
    }
}
 
public boolean containsKey(String key) {
    try {
        readLock.lock();
        return syncHashMap.containsKey(key);
    } finally {
        readLock.unlock();
    }
}
