  // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if (root == null) return "";
        StringBuilder sb = new StringBuilder();
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()) {
            TreeNode tn = q.poll();
            if (tn != null) {
                sb.append(tn.val + ",");
                //we don't check if they are null when adding the node as they are needed for encoding
                q.offer(tn.left);
                q.offer(tn.right);
            } else {
                sb.append("#,");
            }
        }
        sb.deleteCharAt(sb.length()-1);
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if (data.length() == 0) return null;
        String[] nodes = data.split(",");
        Queue<TreeNode> q = new LinkedList<>();
        TreeNode root = new TreeNode(Integer.parseInt(nodes[0]));
        q.offer(root);
        int i = 1;
        while (!q.isEmpty() && i < nodes.length) {
            TreeNode tn = q.poll();
            tn.left = nodes[i].equals("#") ? null: new TreeNode(Integer.parseInt(nodes[i]));
            if (tn.left != null) {q.offer(tn.left);}
            i++;
            tn.right = nodes[i].equals("#") ? null: new TreeNode(Integer.parseInt(nodes[i]));
            if (tn.right != null) {q.offer(tn.right);}
            i++;
        }
        return root;
    }
